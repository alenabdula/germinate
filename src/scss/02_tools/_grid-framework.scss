//
// Breakpoint Next
@function breakpoint-next($name, $breakpoints: $grid_breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}
//
// Breakpoint Min
@function breakpoint-min($name, $breakpoints: $grid_breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}
//
// Breakpoint Max
@function breakpoint-max($name, $breakpoints: $grid_breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}
//
// Media of at least the minimum breakpoint width.
@mixin media-breakpoint-up($name, $breakpoints: $grid_breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  }
  @else {
    @content;
  }
}
//
// Media of at most the maximum breakpoint width.
@mixin media-breakpoint-down($name, $breakpoints: $grid_breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  }
  @else {
    @content;
  }
}
//
// Media between the breakpoint's minimum and maximum widths.
@mixin media-breakpoint-only($name, $breakpoints: $grid_breakpoints) {
  @include media-breakpoint-up($name, $breakpoints) {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}
//
// Media that spans multiple breakpoint widths.
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid_breakpoints) {
  @include media-breakpoint-up($lower, $breakpoints) {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}
//
// Grid
@mixin make-grid-columns(
  $columns: $grid_columns,
  $gutter: $grid_gutter_width,
  $breakpoints: $grid_breakpoints
) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    min-height: 1px;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
  }
  @each $breakpoint in map-keys($breakpoints) {
    @for $i from 1 through $columns {
      .col-#{$breakpoint}-#{$i} {
        @extend %grid-column;
      }
    }
    @include media-breakpoint-up($breakpoint) {
      %grid-column-float-#{$breakpoint} {
        float: left;
      }
      @for $i from 1 through $columns {
        .col-#{$breakpoint}-#{$i} {
          @if not $enable_flex {
            @extend %grid-column-float-#{$breakpoint};
          }
          @include make-col-span($i, $columns);
        }
      }
      @each $modifier in (pull, push, offset) {
        @for $i from 0 through $columns {
          .col-#{$breakpoint}-#{$modifier}-#{$i} {
            @include make-col-modifier($modifier, $i, $columns);
          }
        }
      }
    }
  }
}

@mixin make-container($gutter: $grid_gutter_width) {
  margin-left: auto;
  margin-right: auto;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  @if not $enable_flex {
    @extend %clearfix;
  }
}
//
// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container_max_widths) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row($gutter: $grid_gutter_width) {
  @if $enable_flex {
    display: flex;
    flex-wrap: wrap;
  }
  @else {
    @extend %clearfix;
  }
  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
}

@mixin make-col($gutter: $grid_gutter_width) {
  position: relative;
  @if not $enable_flex {
    float: left;
  }
  min-height: 1px;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
}

@mixin make-col-span($size, $columns: $grid_columns) {
  @if $enable_flex {
    flex: 0 0 percentage($size / $columns);
  }
  @else {
    width: percentage($size / $columns);
  }
}

@mixin make-col-offset($size, $columns: $grid_columns) {
  margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid_columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid_columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
  @if $type == push {
    @include make-col-push($size, $columns);
  }
  @else if $type == pull {
    @include make-col-pull($size, $columns);
  }
  @else if $type == offset {
    @include make-col-offset($size, $columns);
  }
}
