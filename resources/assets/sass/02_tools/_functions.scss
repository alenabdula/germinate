//
// Strip units.
@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

//
// Pixel to REM.
@function rem($pixels, $context: 16) {
    $size: strip-unit($pixels);
    @return #{$size/$context}rem;
}

//
// Get breakpoint by name.
@function get-breakpoint($name, $breakpoints: $breakpoints) {
    @if map-has-key($breakpoints, $name) {
        @return map-get($breakpoints, $name);
    }
    @else {
        @warn "Breakpoint #{$name} wasn't found in $breakpoints.";
    }
}

//
// powerNumber.
@function powerNumber($number, $exp) {
    $value: 1;
    @if $exp > 0 {
        @for $i from 1 through $exp {
            $value: $value * $number;
        }
    }
    @else if $exp < 0 {
        @for $i from 1 through -$exp {
            $value: $value / $number;
        }
    }
    @return $value;
}

//
// colorLuminance.
@function colorLuminance($color) {
    $color-rgb: ("red": red($color), "green": green($color), "blue": blue($color));
    @each $name, $value in $color-rgb {
        $adjusted: 0;
        $value: $value / 255;
        @if $value < 0.03928 {
            $value: $value / 12.92;
        }
        @else {
            $value: ($value + 0.055) / 1.055;
            $value: powerNumber($value, 2);
        }
        $color-rgb: map-merge($color-rgb, ($name: $value));
    }
    @return map-get($color-rgb, "red") * 0.2126 + map-get($color-rgb, "green") * 0.7152 + map-get($color-rgb, "blue") * 0.0722;
}

//
// findColorInvert.
@function findColorInvert($color) {
    @if colorLuminance($color) > 0.55 {
        @return rgba(#000, 0.7);
    }
    @else {
        @return #fff;
    }
}
